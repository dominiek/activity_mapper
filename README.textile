
h1. Activity Mapper

A framework for aggregating (public) social activity into a single polymorphic persistent structure. Using a unified map, it uses service modules to map XML/JSON data onto a unified object space.

Included service modules: 

* Twitter
* Delicious
* Flickr
* Youtube
* Wakoopa

h2. Step 1: Implement your Models

See spec/models.rb for an example.

h2. Step 2: Map that activity!

<pre><code>
  require 'rubygems'
  require 'activity_mapper'
  
  profile = ServiceProfile.create(:url => 'http://twitter.com/dominiek')
  # Gather the most basic credentials:
  profile.create_or_update_summary! 
  # => profile.username
  # => profile.native_id
  # => profile.url
  
  
  profile.aggregate_activity!
  activity = profile.activities.first
  # => activity.caption
  # => activity.occured_at
  # => activity.native_id
  # => activity.object.title
  # => activity.object.body
  # => activity.object.native_id
</code></pre>

h2. Example Service Module

<pre><code>

  module ActivityMapper

    class TwitterServiceModule < ServiceModule
      ACTIVITY_MAP = {
        nil => {
          'activity.occurred_at'      => 'created_at',
          'activity.native_id'        => 'id',
          'activity_object.native_id' => 'id',
          'activity.caption'          => 'text',
          'activity_object.title'     => 'text',
          'activity_object.body'      => 'text'
        }
      }
      ACCEPTED_HOSTS = [/twitter\.com/]

      def create_or_update_summary!(options = {})
        attributes = {}
        attributes[:username] = @profile.username || self.class.username_from_url(@profile.url)

        mapper = ActivityDataMapper.new(ACTIVITY_MAP)
        mapper.fetch!("http://twitter.com/statuses/user_timeline/#{attributes[:username]}.json", :format => :json)
        tweets = mapper.data

        attributes[:avatar_url] = tweets.blank? ? nil : tweets.first['user']['profile_image_url']
        attributes[:native_user_id] = tweets.first['user']['id'].to_i
        @profile.update_attributes(attributes)
      end

      def aggregate_activity!(options = {})
        mapper = ActivityDataMapper.new(ACTIVITY_MAP)
        mapper.fetch!("http://twitter.com/statuses/user_timeline/#{@profile.username}.json", :format => :json)
        mapper.map!
        mapper.entries.sort! { |e2,e1|
          e1['activity.occurred_at'] <=> e2['activity.occurred_at']
        }
        mapper.entries.each do |entry|
          entry['activity_object.url'] = entry['activity.url'] = "http://twitter.com/#{@profile.username}/status/#{entry['activity.native_id']}"
          break if Activity.exists?(@profile.user_id, entry)
          create_activity(entry, ActivityObjectType::STATUS, ActivityVerb::POST) do |activity, activity_object|
          end

        end
      end

    end
  end
</code></pre>

h2. Author

Dominiek ter Heide
http://dominiek.com/
(Note: I wrote this a while back and thought this could be useful to some developers)